name: Not Zipped

on:
  workflow_dispatch:
    inputs:
      cucumber_tag:
        description: 'Select Cucumber Tag to Run'
        required: true
        type: choice
        options:
          - '@SU_TC01_Register_with_valid_credentials'
          - '@SU_TC02_Register_with_leaving_one_mandatory_field_blank'
          - '@SU_TC03_Register_with_existing_accounts_credentials'
          - '@SU_TC04_Navigate_to_Registration_Page_from_Login_Page'
          - '@SU_TC05_login_valid_credentials'
          - '@All_Test'

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Maven Test with Selected Tag
        id: test-run
        run: |
          echo "Running tests with tag: ${{ github.event.inputs.cucumber_tag }}"
          mvn clean test -Dcucumber.filter.tags="${{ github.event.inputs.cucumber_tag }}"

      - name: Determine test result
        id: test-result
        if: always()
        run: |
          if [ "${{ steps.test-run.outcome }}" == "success" ]; then
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi
          echo "tag=$(echo '${{ github.event.inputs.cucumber_tag }}' | sed 's/@//')" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Update Confluence
        run: |
          python update_confluence2.py \
            "${{ steps.test-result.outputs.tag }}" \
            "${{ steps.test-result.outputs.status }}" \
            "${{ steps.test-result.outputs.timestamp }}" \
            "31850497" \
            "${{ secrets.CONFLUENCE_TOKEN }}"

      - name: Install Google API Python Client
        run: |
          pip install --upgrade google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

      - name: Upload Latest SparkReport Folder to Google Drive
        env:
          GDRIVE_CREDENTIALS: ${{ secrets.GDRIVE_CREDENTIALS }}
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          python <<EOF
          import os, json
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          def get_latest_spark_folder():
              base = "ExtentReports"
              folders = [f for f in os.listdir(base) if f.startswith("SparkReport_") and os.path.isdir(os.path.join(base, f))]
              folders.sort(reverse=True)
              return os.path.join(base, folders[0]) if folders else None

          def create_drive_folder(service, folder_name, parent_id):
              file_metadata = {
                  'name': folder_name,
                  'mimeType': 'application/vnd.google-apps.folder',
                  'parents': [parent_id]
              }
              folder = service.files().create(body=file_metadata, fields='id').execute()
              return folder.get("id")

          def upload_file_to_drive(service, file_path, parent_folder_id):
              file_name = os.path.basename(file_path)
              file_metadata = {'name': file_name, 'parents': [parent_folder_id]}
              media = MediaFileUpload(file_path, resumable=True)
              file = service.files().create(body=file_metadata, media_body=media, fields='id').execute()
              print(f"Uploaded {file_name}: ID {file.get('id')}")

          creds_dict = json.loads(os.environ['GDRIVE_CREDENTIALS'])
          creds = service_account.Credentials.from_service_account_info(creds_dict, scopes=["https://www.googleapis.com/auth/drive"])
          service = build("drive", "v3", credentials=creds)

          latest_folder = get_latest_spark_folder()
          if not latest_folder:
              print("No SparkReport folder found.")
              exit(1)

          folder_name = os.path.basename(latest_folder)
          drive_folder_id = create_drive_folder(service, folder_name, os.environ['GDRIVE_FOLDER_ID'])
          print(f"Created folder '{folder_name}' on Drive with ID: {drive_folder_id}")

          for root, _, files in os.walk(latest_folder):
              for file in files:
                  file_path = os.path.join(root, file)
                  upload_file_to_drive(service, file_path, drive_folder_id)
          EOF
