name: Run Cucumber Tests and Upload Reports to Drive

on:
  workflow_dispatch:
    inputs:
      cucumber_tag:
        description: 'Select Cucumber Tag to Run'
        required: true
        type: choice
        options:
          - '@SU_TC01_Register_with_valid_credentials'
          - '@SU_TC02_Register_with_leaving_one_mandatory_field_blank'
          - '@SU_TC03_Register_with_existing_accounts_credentials'
          - '@SU_TC04_Navigate_to_Registration_Page_from_Login_Page'
          - '@SU_TC05_login_valid_credentials'
          - '@SU_TC06_Login_with_Valid_Username_Invalid_Password'

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Maven Test with Selected Tag
        run: |
          echo "Running tests with tag: ${{ github.event.inputs.cucumber_tag }}"
          mvn clean test -Dcucumber.filter.tags="${{ github.event.inputs.cucumber_tag }}"

      - name: Verify Reports Generation
        run: |
          echo "=== Checking for Generated Reports ==="
          find . -name "SparkReport_*" -type d || echo "No Spark reports found"
          if [ -d "ExtentReports" ]; then
            echo "ExtentReports directory exists with:"
            ls -R ExtentReports
          else
            echo "::error::ExtentReports directory not found!"
            exit 1
          fi

      - name: Set up Python for Drive API
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Google Drive API
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Upload Reports via Drive API
        env:
          GDRIVE_SERVICE_ACCOUNT_JSON: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON }}
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          # Create credentials file
          echo "$GDRIVE_SERVICE_ACCOUNT_JSON" > credentials.json
          chmod 600 credentials.json

          # Get the latest Spark report directory
          REPORT_DIR=$(find ExtentReports -name "SparkReport_*" -type d | head -1)
          
          if [ -z "$REPORT_DIR" ]; then
            echo "::error::No SparkReport directory found!"
            exit 1
          fi

          echo "=== Uploading reports from: $REPORT_DIR ==="
          ls -R "$REPORT_DIR"

          # Python script to handle upload
          python3 -c "
          import os
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          # Set up credentials
          SCOPES = ['https://www.googleapis.com/auth/drive']
          SERVICE_ACCOUNT_FILE = 'credentials.json'
          credentials = service_account.Credentials.from_service_account_file(
              SERVICE_ACCOUNT_FILE, scopes=SCOPES)
          service = build('drive', 'v3', credentials=credentials)

          # Upload function
          def upload_file(file_path, parent_id):
              file_name = os.path.basename(file_path)
              file_metadata = {
                  'name': file_name,
                  'parents': [parent_id]
              }
              media = MediaFileUpload(file_path)
              file = service.files().create(
                  body=file_metadata,
                  media_body=media,
                  fields='id'
              ).execute()
              return file.get('id')

          # Upload all files recursively
          for root, dirs, files in os.walk('$REPORT_DIR'):
              for file in files:
                  file_path = os.path.join(root, file)
                  try:
                      file_id = upload_file(file_path, '$GDRIVE_FOLDER_ID')
                      print(f'Uploaded: {file_path} (ID: {file_id})')
                  except Exception as e:
                      print(f'Error uploading {file_path}: {str(e)}')
          "

      - name: Cleanup
        run: |
          rm -f credentials.json
